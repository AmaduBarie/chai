{"version":3,"sources":["logo.svg","login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","textField","width","margin","withoutLabel","marginTop","conbotton","display","justifyContent","button","backgroundColor","conbtn","alignItems","con","marginLeft","marginRight","border","borderTopRightRadius","borderTopLeftRadius","lname","alignSelf","lpassword","name","password","namepass","lnamelpass","height","flexDirection","CenteredGrid","prop","classes","React","useState","amount","weight","weightRange","showPassword","values","setValues","className","Grid","container","item","xs","Paper","Typography","variant","FormControl","noValidate","autoComplete","clsx","TextField","id","Input","type","value","onChange","event","target","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","onMouseDown","preventDefault","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2c58d4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\n \r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { green } from '@material-ui/core/colors/green';\r\n\r\n \r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  textField: {\r\n    width: 300,\r\n  }\r\n  ,\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  conbotton:{\r\n    display:'flex',\r\n    justifyContent:'center'\r\n  },\r\n  button:{\r\n    backgroundColor:'green',\r\n    marginTop:'.4em',\r\n    width:'37em',\r\n    '&:hover':{\r\n        backgroundColor: 'rgba(54, 190, 12, 0.958)'\r\n    }\r\n\r\n  },\r\n  conbtn:{\r\n    display:'flex',\r\n    alignItems:'center',\r\n    justifyContent:'center'\r\n  },\r\n  con:{\r\nmarginTop:'10vh',\r\ndisplay:'flex',\r\nwidth:'80%',\r\njustifyContent:'center',\r\nalignItems:'center',\r\nmarginLeft:'10%',\r\n marginRight:'10%',\r\n border:'2px solid green',\r\n borderTopRightRadius:'.5em',\r\n borderTopLeftRadius:'.5em',\r\n  },\r\n  lname:{\r\n    display:'flex',\r\n    marginRight:\"1em\",\r\n    marginTop:'-.4em',\r\n    justifyContent:'flex-end',\r\n    alignSelf:'flex-end',\r\n    color:'white'\r\n    \r\n  },\r\n  lpassword:{\r\n    display:'flex',\r\n    marginRight:\"1em\",\r\n    marginTop:'1.2em',\r\n    justifyContent:'flex-end',\r\n    alignSelf:'flex-end',\r\n    color:'white'\r\n  },\r\n  name:{\r\n    display:'flex',\r\n    marginTop:'.8em',\r\n    justifyContent:'flex-start'\r\n  },\r\n  password:{\r\n    display:'flex',\r\n    marginTop:'.8em',\r\n    justifyContent:'flex-start'\r\n  },\r\n  namepass:{\r\n      marginTop:\"-2em\",\r\n      width:'40em',\r\n    \r\n  },\r\n  lnamelpass:{\r\n      backgroundColor:'green',\r\n      height:'50vh',\r\n     display:'flex',\r\n     justifyContent:'center',\r\n     alignItems:'center',\r\n     flexDirection:'column',\r\n     width:'5em'\r\n  }\r\n}));\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  const [values, setValues] = React.useState({\r\n    amount: '',\r\n    password: '',\r\n    weight: '',\r\n    weightRange: '',\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = prop => event => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n              <Typography variant=\"h3\">\r\n                  Input Details\r\n              </Typography>\r\n          </Paper>\r\n        </Grid>\r\n\r\n\r\n        <Grid container className={classes.conbotton} spacing={0}>\r\n\r\n       \r\n        <Grid container className={classes.con} spacing={1}>\r\n\r\n        <Grid item className={classes.lnamelpass}  xs={6}>\r\n           <Grid item className={classes.lname} >\r\n           <Typography variant=\"h4\">Name:</Typography>\r\n        </Grid>\r\n        <Grid item className={classes.lpassword}>\r\n           <Typography variant=\"h4\">Password:</Typography>\r\n        </Grid>\r\n        </Grid>\r\n\r\n\r\n        <Grid item className={classes.namepass} xs={6}>\r\n           <Grid item className={classes.name}>\r\n\r\n               \r\n           <FormControl noValidate autoComplete=\"on\" className={clsx(classes.password, classes.textField)}> \r\n      <TextField id=\"standard-basic\"   />\r\n        </FormControl>\r\n\r\n        </Grid>\r\n\r\n \r\n           <Grid item className={classes.password}>\r\n\r\n           <FormControl className={clsx(classes.password, classes.textField)}>\r\n          {/* <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel> */}\r\n          <Input\r\n            id=\"standard-adornment-password\"\r\n            type={values.showPassword ? 'text' : 'password'}\r\n            value={values.password}\r\n            onChange={handleChange('password')}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={handleClickShowPassword}\r\n                  onMouseDown={handleMouseDownPassword}\r\n                >\r\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n\r\n        </Grid>\r\n        </Grid>\r\n\r\n\r\n   \r\n        </Grid>\r\n       \r\n        <Grid item className={classes.conbtn} spacing={1}>\r\n        <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\r\n        Login\r\n      </Button>\r\n        </Grid>\r\n        </Grid>\r\n         \r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './login'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src=\"\" className=\"App-logo\" alt=\"Ministry\" width={12} />\n         */}\n        Ministry Of Health\n      </header>\n\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}